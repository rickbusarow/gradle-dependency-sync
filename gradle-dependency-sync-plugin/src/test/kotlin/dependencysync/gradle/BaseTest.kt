/*
 * Copyright (C) 2020-2022 Rick Busarow
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dependencysync.gradle

import hermit.test.junit.HermitJUnit5
import io.kotest.matchers.collections.shouldContain
import org.gradle.testkit.runner.BuildResult
import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.TestInfo
import java.io.File
import kotlin.properties.Delegates
import io.kotest.matchers.shouldBe as kotestShouldBe

public val DEFAULT_GRADLE_VERSION: String = System
  .getProperty("dependencySync.gradleVersion", "7.1.1")
  /*
   * The GitHub Actions test matrix parses "7.0" into an Int and passes in a command line argument of "7".
   * That version doesn't resolve.  So if the String doesn't contain a period, just append ".0"
   */
  .let { prop ->
    if (prop.contains('.')) prop else "$prop.0"
  }

@Suppress("UnnecessaryAbstractClass")
abstract class BaseTest : HermitJUnit5() {

  val testProjectDir by tempDir {

    val className = testInfo.testClass.get().simpleName

    val testName = testInfo.displayName
      .replace("[^a-zA-Z0-9]".toRegex(), "_")
      .replace("_{2,}".toRegex(), "_")
      .removeSuffix("_")

    "build/tests/$className/$testName"
  }

  fun File.relativePath() = path.removePrefix(testProjectDir.path)

  fun String.fixPath(): String = replace(File.separator, "/")

  private val gradleVersion = DEFAULT_GRADLE_VERSION

  val gradleRunner by resets {
    GradleRunner
      .create()
      .forwardOutput()
      .withGradleVersion(gradleVersion)
      .withPluginClasspath()
      // .withDebug(true)
      .withProjectDir(testProjectDir)
  }

  private var testInfo: TestInfo by Delegates.notNull()

  fun build(vararg tasks: String): BuildResult {
    return gradleRunner.withArguments(*tasks).build()
  }

  fun BuildResult.shouldSucceed() {
    tasks.forEach { it.outcome shouldBe TaskOutcome.SUCCESS }
  }

  fun shouldFailWithMessage(vararg tasks: String, messageBlock: (String) -> Unit) {
    val result = gradleRunner.withArguments(*tasks).buildAndFail()

    result.tasks.map { it.outcome } shouldContain TaskOutcome.FAILED
    messageBlock(result.output.fixPath())
  }

  @BeforeEach
  fun beforeEach(testInfo: TestInfo) {
    this.testInfo = testInfo
  }

  @Suppress("UNCHECKED_CAST", "NOTHING_TO_INLINE")
  infix fun <T, U : T> T.shouldBe(expected: U?) {
    /*
    Any AssertionError generated by this function will have this function at the top of its stacktrace.

    The actual call site for the assertion is always the _second_ line.

    So, we can catch the assertion error, remove this function from the stacktrace, and rethrow.
     */
    try {
      if (this is String && expected is String) {
        this.trim().trimIndent() kotestShouldBe expected.trim().trimIndent()
      } else {
        kotestShouldBe(expected)
      }
    } catch (assertionError: AssertionError) {
      // remove this function from the stacktrace and rethrow
      assertionError.stackTrace = assertionError
        .stackTrace
        .drop(1)
        .toTypedArray()
      throw assertionError
    }
  }

  @Suppress("LongParameterList")
  inline fun test(
    toml: String,
    gradle: String,
    tomlPath: String = "/gradle/libs.versions.toml",
    useKts: Boolean = true,
    rootBuild: String = """
      buildscript {
        repositories {
          mavenCentral()
          google()
          maven("https://plugins.gradle.org/m2/")
          maven("https://oss.sonatype.org/content/repositories/snapshots")
        }
        dependencies {
          classpath("com.android.tools.build:gradle:4.2.2")
          classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20")
        }
      }
    """.trimIndent(),
    settingsText: String = """
      pluginManagement {
        repositories {
          gradlePluginPortal()
          mavenCentral()
        }
      }
      enableFeaturePreview("VERSION_CATALOGS")
      include(":dependencies")
    """.trimIndent(),
    testAction: TestResults.() -> Unit
  ) {

    File("${testProjectDir.path}/build.gradle.kts").writeText(rootBuild.trimIndent())
    File("${testProjectDir.path}/settings.gradle.kts").writeText(settingsText.trimIndent())

    File("${testProjectDir.path}/gradle").mkdirs()
    val tomlFile = File("${testProjectDir.path}/$tomlPath")
    tomlFile.writeText(toml.trimIndent())

    val depsRoot = File("${testProjectDir.path}/dependencies").also { it.mkdirs() }
    val buildFile = if (useKts) {
      File(depsRoot.path + "/build.gradle.kts")
    } else {
      File(depsRoot.path + "/build.gradle")
    }
    buildFile.createNewFile()
    buildFile.writeText(gradle.trimIndent())

    val testResults = TestResults(
      toml.trimIndent(),
      gradle.trimIndent(),
      tomlFile,
      buildFile,
      build("dependencySync")
    )

    testAction.invoke(testResults)
  }

  data class TestResults(
    val tomlInput: String,
    val buildInput: String,
    val tomlFile: File,
    val buildFile: File,
    val buildResult: BuildResult
  ) {
    fun tomlText() = tomlFile.readText()
    fun buildText() = buildFile.readText()
  }
}
